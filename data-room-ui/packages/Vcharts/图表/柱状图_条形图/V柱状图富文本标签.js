// 配置版本号\nconst version = \'2024051804\';\n// 标题\nconst title = \'V柱状图富文本标签\';\n// 用于标识，唯一\nconst name = \'V柱状图富文本标签\';\n// 组件类型标识\nconst type = \'customComponent\';\n// VChart 图表类型标识\nconst chartType = \'bar\';\n\n// 右侧配置项\nconst setting = [\n  { label: \'类别字段/系列\', type: \'select\', field: \'xField\', optionField: \'xField\', multiple: false, value: \'\', tabName: \'data\' }, // 对应 day (也作为 seriesField)\n  { label: \'数值字段\', type: \'select\', field: \'yField\', optionField: \'yField\', multiple: false, value: \'\', tabName: \'data\' }, // 对应 sales\n  // 样式配置\n  { label: \'显示标签\', type: \'switch\', field: \'labelVisible\', optionField: \'label.visible\', value: true, tabName: \'custom\', groupName: \'label\' },\n  { \n    label: \'标签位置\', \n    type: \'select\', \n    field: \'labelPosition\', \n    optionField: \'label.position\', \n    options: [\n      {label: \'top\', value: \'top\'}, \n      {label: \'bottom\', value: \'bottom\'}, \n      {label: \'left\', value: \'left\'}, \n      {label: \'right\', value: \'right\'}, \n      {label: \'top-right\', value: \'top-right\'}, \n      {label: \'top-left\', value: \'top-left\'}, \n      {label: \'bottom-right\', value: \'bottom-right\'}, \n      {label: \'bottom-left\', value: \'bottom-left\'}, \n      {label: \'center\', value: \'center\'}, \n      {label: \'inside\', value: \'inside\'}, \n      {label: \'inside-top\', value: \'inside-top\'}, \n      {label: \'inside-bottom\', value: \'inside-bottom\'}, \n      {label: \'inside-right\', value: \'inside-right\'}, \n      {label: \'inside-left\', value: \'inside-left\'}\n    ], \n    value: \'top\', \n    tabName: \'custom\', \n    groupName: \'label\' \n  },\n  // 富文本格式化逻辑较为复杂，建议通过 optionOverride 实现\n  // 通用配置\n  { label: \'主题选择\', type: \'select\', field: \'chartTheme\', optionField: \'theme\', options: [], value: \'light\', tabName: \'custom\', groupName: \'graph\' },\n  { label: \'Option 覆盖 (JSON)\', type: \'textarea\', field: \'optionOverride\', optionField: \'\', \n    value: JSON.stringify({ \n      label: {\n        formatMethod: `(value, data) => {\n          // 此处需要定义 iconMap 或传入图标 URL\n          const iconMap = {\n            \'Monday\': \'https://lf9-dp-fe-cms-tos.byteorg.com/obj/bit-cloud/VChart/monday.png\',\n            \'Tuesday\': \'https://lf9-dp-fe-cms-tos.byteorg.com/obj/bit-cloud/VChart/tuesday.png\',\n            \'Wednesday\': \'https://lf9-dp-fe-cms-tos.byteorg.com/obj/bit-cloud/VChart/wednesday.png\',\n            \'Thursday\': \'https://lf9-dp-fe-cms-tos.byteorg.com/obj/bit-cloud/VChart/thursday.png\',\n            \'Friday\': \'https://lf9-dp-fe-cms-tos.byteorg.com/obj/bit-cloud/VChart/friday.png\'\n          };\n          return {\n            type: \'rich\',\n            text: [\n              { image: iconMap[data.day] || \'\', width: 18, height: 18 },\n              { text: \` \${data.day}\`, fontSize: 12, underline: true },\n              { text: \`: \`, fontSize: 12 },\n              { text: \`\${value} \`, fontSize: 14, fontStyle: \'italic\', fill: \'black\', fontWeight: \'bold\' }\n            ]\n          };\n        }`\n      } \n    }, null, 2),\n    tabName: \'custom\', groupName: \'graph\' \n  }\n];\n\n// 示例数据 (来自参考 spec)\nconst data = {\n  id: \'richTextLabelBarData\',\n  values: [\n    { day: \'Monday\', sales: 22 },\n    { day: \'Tuesday\', sales: 13 },\n    { day: \'Wednesday\', sales: 25 },\n    { day: \'Thursday\', sales: 29 },\n    { day: \'Friday\', sales: 38 }\n  ]\n};\n\n// 默认 VChart Option (Spec)\nconst option = {\n  type: \'bar\',\n  data: [data],\n  xField: \'day\',\n  yField: \'sales\',\n  seriesField: \'day\', // 用于默认颜色区分\n  label: {\n    visible: true,\n    position: \'top\',\n    // formatMethod 默认简单显示值，富文本通过 override 实现\n    formatMethod: value => value\n  },\n  axes: [\n    { orient: \'bottom\', type: \'band\' },\n    { orient: \'left\', type: \'linear\' }\n  ],\n  legends: { visible: false } // 默认不显示图例，因为颜色由 xField 区分\n};\n\nconst dataHandler = `return data;`;\n// Option 处理函数中需要确保 eval 可以访问到 iconMap，或在 formatMethod 字符串中定义\nconst optionHandler = `\nfunction handleOption(option, config) {\n  // 注意：override 中的 formatMethod 是字符串，需要安全地处理\n  // 更好的方法是让用户在 override 中提供完整的函数体字符串\n  return option;\n}\n`;\n\nexport default {\n  version, title, name, type, chartType, option, setting, dataHandler, optionHandler\n};\ 