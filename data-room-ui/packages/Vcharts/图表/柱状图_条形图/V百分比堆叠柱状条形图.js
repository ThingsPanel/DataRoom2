// 配置版本号\nconst version = \'2024072601\'; // New version for merged file\n// 标题\nconst title = \'V百分比堆叠柱状条形图\';\n// 用于标识，唯一\nconst name = \'V百分比堆叠柱状条形图\';\n// 组件类型标识\nconst type = \'customComponent\';\n// VChart 图表类型标识\nconst chartType = \'bar\';\n\n// 右侧配置项 (合并后)\nconst setting = [\n  // 数据配置项\n  {\n    label: \'类别轴字段\', // Generic name\n    type: \'select\',\n    field: \'categoryField\',\n    optionField: \'\', // Mapped in handler\n    multiple: false,\n    value: \'State\', // Default from examples\n    tabName: \'custom\',\n    groupName: \'data\'\n  },\n  {\n    label: \'值轴字段\', // Generic name\n    type: \'select\',\n    field: \'valueField\',\n    optionField: \'\', // Mapped in handler\n    multiple: false,\n    value: \'Population\', // Default from examples\n    tabName: \'custom\',\n    groupName: \'data\'\n  },\n  {\n    label: \'系列(堆叠)字段\', // Series field\n    type: \'select\',\n    field: \'seriesField\',\n    optionField: \'seriesField\',\n    multiple: false,\n    value: \'Age\', // Default from examples\n    tabName: \'custom\',\n    groupName: \'data\'\n  },\n  // 图表方向\n  {\n    label: \'方向\',\n    type: \'radio\',\n    field: \'direction\',\n    optionField: \'direction\',\n    value: \'vertical\', // Default to vertical (column chart)\n    options: [\n      { label: \'垂直(柱状)\', value: \'vertical\' },\n      { label: \'水平(条形)\', value: \'horizontal\' }\n    ],\n    tabName: \'custom\',\n    groupName: \'basic\'\n  },\n  // 堆叠配置 (固定为 true，因为这是堆叠图)\n  {\n    label: \'启用堆叠\', type: \'switch\', field: \'stack\', optionField: \'stack\', value: true, disabled: true, // Disabled as it\'s mandatory\n    tabName: \'custom\', groupName: \'stack\'\n  },\n  {\n    label: \'启用百分比\', type: \'switch\', field: \'percent\', optionField: \'percent\', value: true, disabled: true, // Disabled as it\'s mandatory\n    tabName: \'custom\', groupName: \'stack\'\n  },\n  // 图表样式配置\n  {\n    label: \'柱/条宽度\', // Stacked bar width might behave differently\n    type: \'inputNumber\',\n    field: \'barWidth\',\n    optionField: \'series[0].barWidth\',\n    value: undefined, // Default to undefined (auto width for stacked)\n    placeholder: \'留空则自动计算\',\n    min: 1,\n    max: 100,\n    step: 1,\n    tabName: \'custom\',\n    groupName: \'graph\'\n  },\n   {\n    label: \'柱/条圆角\',\n    type: \'inputNumber\',\n    field: \'barCornerRadius\',\n    optionField: \'series[0].bar.style.cornerRadius\',\n    value: 0,\n    min: 0,\n    max: 50,\n    step: 1,\n    tabName: \'custom\',\n    groupName: \'graph\'\n   },\n  // 标签配置\n  {\n    label: \'显示标签\',\n    type: \'switch\',\n    field: \'labelVisible\',\n    optionField: \'label.visible\', // Stacked labels are often top-level\n    value: false,\n    tabName: \'custom\',\n    groupName: \'label\'\n  },\n  // 坐标轴配置\n   {\n    label: \'显示类别轴\',\n    type: \'switch\',\n    field: \'categoryAxisVisible\',\n    optionField: \'\', // Mapped in handler\n    value: true,\n    tabName: \'custom\',\n    groupName: \'axes\'\n  },\n  {\n    label: \'显示值轴\',\n    type: \'switch\',\n    field: \'valueAxisVisible\',\n    optionField: \'\', // Mapped in handler\n    value: true,\n    tabName: \'custom\',\n    groupName: \'axes\'\n  },\n   {\n    label: \'值轴百分比格式\', // Specific to percentage charts\n    type: \'switch\',\n    field: \'valueAxisPercentFormat\',\n    optionField: \'\', // Handled in handler\n    value: true,\n    tabName: \'custom\',\n    groupName: \'axes\'\n  },\n  // 图例配置\n  {\n    label: \'显示图例\',\n    type: \'switch\',\n    field: \'legendVisible\',\n    optionField: \'legends.visible\',\n    value: true,\n    tabName: \'custom\',\n    groupName: \'legend\'\n  },\n   {\n    label: \'图例方向\',\n    type: \'select\',\n    field: \'legendOrient\',\n    optionField: \'legends.orient\',\n    options: [\n      { label: \'顶部\', value: \'top\' }, { label: \'底部\', value: \'bottom\' },\n      { label: \'左侧\', value: \'left\' }, { label: \'右侧\', value: \'right\' }\n    ],\n    value: \'top\',\n    tabName: \'custom\',\n    groupName: \'legend\'\n  },\n  // 提示信息配置\n  {\n    label: \'显示提示信息\',\n    type: \'switch\',\n    field: \'tooltipVisible\',\n    optionField: \'tooltip.visible\',\n    value: true,\n    tabName: \'custom\',\n    groupName: \'tooltip\'\n  },\n  // 通用配置\n  {\n    label: \'主题选择\',\n    type: \'select\',\n    field: \'chartTheme\',\n    optionField: \'theme\',\n    options: [], // Should be populated externally\n    value: \'light\',\n    tabName: \'custom\',\n    groupName: \'basic\'\n  },\n  {\n    label: \'Option 覆盖 (JSON)\',\n    type: \'textarea\',\n    field: \'optionOverride\',\n    optionField: \'\',\n    value: \'{}\',\n    tabName: \'custom\',\n    groupName: \'basic\'\n  }\n];\n\n// 示例数据 (Use V百分比堆叠柱状图\'s data as default)\nconst data = {\n  id: \'percentStackedBarData\', // Unique ID\n  values: [\n    { State: \'WY\', Age: \'Under 5 Years\', Population: 25635 }, { State: \'WY\', Age: \'5 to 13 Years\', Population: 1890 }, { State: \'WY\', Age: \'14 to 17 Years\', Population: 9314 },\n    { State: \'DC\', Age: \'Under 5 Years\', Population: 30352 }, { State: \'DC\', Age: \'5 to 13 Years\', Population: 20439 }, { State: \'DC\', Age: \'14 to 17 Years\', Population: 10225 },\n    { State: \'VT\', Age: \'Under 5 Years\', Population: 38253 }, { State: \'VT\', Age: \'5 to 13 Years\', Population: 42538 }, { State: \'VT\', Age: \'14 to 17 Years\', Population: 15757 },\n    { State: \'ND\', Age: \'Under 5 Years\', Population: 51896 }, { State: \'ND\', Age: \'5 to 13 Years\', Population: 67358 }, { State: \'ND\', Age: \'14 to 17 Years\', Population: 18794 },\n    { State: \'AK\', Age: \'Under 5 Years\', Population: 72083 }, { State: \'AK\', Age: \'5 to 13 Years\', Population: 85640 }, { State: \'AK\', Age: \'14 to 17 Years\', Population: 22153 }\n  ]\n};\n\n// 默认 VChart Option (Spec) - Defaulting to vertical (column)\nconst option = {\n  type: \'bar\',\n  data: [data],\n  direction: \'vertical\',   // Default direction\n  stack: true,             // Mandatory\n  percent: true,           // Mandatory\n  xField: \'State\',         // Default mapping for vertical\n  yField: \'Population\',    // Default mapping for vertical\n  seriesField: \'Age\',      // Stacking/Series field\n  axes: [ // Default axes for vertical percentage\n    { orient: \'bottom\', type: \'band\', visible: true }, // Category axis\n    { // Value axis with percentage format\n      orient: \'left\',\n      type: \'linear\',\n      visible: true,\n      grid: { visible: true },\n      label: { formatMethod: val => `${(val * 100).toFixed(0)}%` } // Default format\n    }\n  ],\n  series: [ // Series config for stacked bar\n    {\n      type: \'bar\',\n      // barWidth: undefined, // Default to auto width\n      bar: { style: { cornerRadius: 0 } } // Default style\n    }\n  ],\n  label: { visible: false }, // Default label visibility (can be complex for stacked)\n  legends: { visible: true, orient: \'top\' }, // Default legend\n  tooltip: { visible: true } // Default tooltip\n};\n\n// 数据处理脚本\nconst dataHandler = `return data;`;\n\n// Option 处理脚本\nconst optionHandler = `\nfunction handleOption(option, config) {\n  const settings = config.setting;\n  const direction = settings.find(s => s.field === \'direction\')?.value || \'vertical\';\n  const categoryField = settings.find(s => s.field === \'categoryField\')?.value;\n  const valueField = settings.find(s => s.field === \'valueField\')?.value;\n  const seriesField = settings.find(s => s.field === \'seriesField\')?.value;\n\n  // --- Ensure Stack and Percent (should always be true for this component) ---\n  option.stack = true;\n  option.percent = true;\n\n  // 1. Set direction and seriesField\n  option.direction = direction;\n  if (seriesField) {\n      option.seriesField = seriesField;\n  }\n\n  // 2. Map fields based on direction\n  if (categoryField && valueField) {\n    if (direction === \'vertical\') {\n      option.xField = categoryField;\n      option.yField = valueField;\n    } else { // horizontal\n      option.xField = valueField;\n      option.yField = categoryField;\n    }\n  }\n\n  // Ensure series array and first series object exist\n  if (!option.series) option.series = [{}];\n  if (!option.series[0]) option.series[0] = {};\n  option.series[0].type = \'bar\';\n\n  // 3. Handle axes visibility and format\n  const categoryAxisVisible = settings.find(s => s.field === \'categoryAxisVisible\')?.value;\n  const valueAxisVisible = settings.find(s => s.field === \'valueAxisVisible\')?.value;\n  const valueAxisPercentFormat = settings.find(s => s.field === \'valueAxisPercentFormat\')?.value;\n\n  if (!option.axes) option.axes = [{}, {}];\n  if (!option.axes[0]) option.axes[0] = {};\n  if (!option.axes[1]) option.axes[1] = {};\n\n  let categoryAxis, valueAxis;\n  // IMPORTANT: Axis orientation for horizontal percentage might differ (e.g., top value axis)\n  if (direction === \'vertical\') {\n      option.axes[0].orient = \'bottom\'; option.axes[0].type = \'band\';\n      option.axes[1].orient = \'left\'; option.axes[1].type = \'linear\';\n      categoryAxis = option.axes[0]; valueAxis = option.axes[1];\n  } else { // horizontal - check VChart examples for best practice on axis orientation\n       option.axes[0].orient = \'left\'; option.axes[0].type = \'band\';\n       // Value axis might be \'top\' or \'bottom\' for horizontal percent stack\n       option.axes[1].orient = \'bottom\'; // Defaulting to bottom, can be overridden\n       option.axes[1].type = \'linear\';\n       categoryAxis = option.axes[0]; valueAxis = option.axes[1];\n  }\n\n  if (categoryAxisVisible !== undefined) categoryAxis.visible = categoryAxisVisible;\n  if (valueAxisVisible !== undefined) valueAxis.visible = valueAxisVisible;\n\n  // Apply/Remove percentage format on value axis\n  if (!valueAxis.label) valueAxis.label = {};\n  if (valueAxisPercentFormat === true) {\n      valueAxis.label.formatMethod = val => \`\${(val * 100).toFixed(0)}%\`;\n  } else if (valueAxisPercentFormat === false) {\n      // Remove the formatMethod if it exists\n       if (valueAxis.label.formatMethod) {\n            delete valueAxis.label.formatMethod;\n       }\n  }\n  // Ensure grid setting persists if axis is visible\n   if (valueAxis.visible) {\n       if(!valueAxis.grid) valueAxis.grid = {};\n       valueAxis.grid.visible = true; // Typically show grid on value axis\n   } else {\n        if(valueAxis.grid) valueAxis.grid.visible = false;\n   }\n\n\n  // 4. Handle bar width\n  const barWidth = settings.find(s => s.field === \'barWidth\')?.value;\n  if (barWidth !== undefined && barWidth !== null && barWidth !== \'\') {\n    option.series[0].barWidth = barWidth;\n  } else {\n     if (option.series[0].hasOwnProperty(\'barWidth\')) {\n         delete option.series[0].barWidth;\n     }\n  }\n\n  // 5. Handle bar corner radius\n  const barCornerRadius = settings.find(s => s.field === \'barCornerRadius\')?.value;\n  if (barCornerRadius !== undefined) {\n      if (!option.series[0].bar) option.series[0].bar = {};\n      if (!option.series[0].bar.style) option.series[0].bar.style = {};\n      option.series[0].bar.style.cornerRadius = barCornerRadius;\n  }\n\n  // 6. Handle label visibility (top-level for stacked)\n  const labelVisible = settings.find(s => s.field === \'labelVisible\')?.value;\n  if (labelVisible !== undefined) {\n    if (!option.label) option.label = {};\n    option.label.visible = labelVisible;\n     // Add default percentage format if labels enabled\n     // if (labelVisible && !option.label.formatMethod) {\n     //   option.label.formatMethod = (datum) => \`\${(datum[option.yField || \'value\'] * 100).toFixed(0)}%\`;\n     //}\n  }\n\n  // 7. Handle legend visibility and orientation\n  const legendVisible = settings.find(s => s.field === \'legendVisible\')?.value;\n  const legendOrient = settings.find(s => s.field === \'legendOrient\')?.value;\n   if(!option.legends) option.legends = {};\n   if(Array.isArray(option.legends)) {\n       if(!option.legends[0]) option.legends[0] = {};\n       if (legendVisible !== undefined) option.legends[0].visible = legendVisible;\n       if (legendOrient) option.legends[0].orient = legendOrient;\n   } else {\n       if (legendVisible !== undefined) option.legends.visible = legendVisible;\n       if (legendOrient) option.legends.orient = legendOrient;\n   }\n\n   // 8. Handle tooltip visibility\n   const tooltipVisible = settings.find(s => s.field === \'tooltipVisible\')?.value;\n   if (tooltipVisible !== undefined) {\n       if(!option.tooltip) option.tooltip = {};\n       option.tooltip.visible = tooltipVisible;\n   }\n\n  return option;\n}\n`;\n\n// 导出配置对象\nexport default {\n  version,\n  title,\n  name,\n  type,\n  chartType,\n  option,\n  setting,\n  dataHandler,\n  optionHandler\n};\n 