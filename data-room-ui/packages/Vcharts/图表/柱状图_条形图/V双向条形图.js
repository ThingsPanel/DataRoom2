// 配置版本号\nconst version = \'2024051704\';\n// 标题\nconst title = \'V双向条形图\';\n// 用于标识，唯一\nconst name = \'V双向条形图\';\n// 组件类型标识\nconst type = \'customComponent\';\n// VChart 图表类型标识\nconst chartType = \'bar\';\n\n// 右侧配置项\nconst setting = [\n  { label: \'类别轴字段 (Y)\', type: \'select\', field: \'yField\', optionField: \'yField\', multiple: false, value: \'\', tabName: \'data\' }, // 对应 state\n  { label: \'值轴字段 (X)\', type: \'select\', field: \'xField\', optionField: \'xField\', multiple: false, value: \'\', tabName: \'data\' }, // 对应 ratio\n  // 样式配置\n  { label: \'隐藏Y轴标签\', type: \'switch\', field: \'yAxisLabelVisible\', optionField: \'axes.0.label.visible\', value: false, tabName: \'custom\', groupName: \'axis\' }, // 对应 axes[0].label.visible\n  { label: \'隐藏Y轴刻度\', type: \'switch\', field: \'yAxisTickVisible\', optionField: \'axes.0.tick.visible\', value: false, tabName: \'custom\', groupName: \'axis\' }, // 对应 axes[0].tick.visible\n  { label: \'X轴百分比格式\', type: \'switch\', field: \'xAxisPercentFormat\', optionField: \'axes.1.label.formatMethod\', value: true, tabName: \'custom\', groupName: \'axis\' }, // 控制是否格式化为百分比\n  // 通用配置\n  { label: \'主题选择\', type: \'select\', field: \'chartTheme\', optionField: \'theme\', options: [], value: \'light\', tabName: \'custom\', groupName: \'graph\' },\n  { label: \'Option 覆盖 (JSON)\', type: \'textarea\', field: \'optionOverride\', optionField: \'\', value: \'{}\', tabName: \'custom\', groupName: \'graph\' }\n];\n\n// 示例数据 (来自参考 spec)\nconst data = {\n  id: \'barData\',\n  values: [\n    { state: \'District of Columbia\', ratio: 0.1728802123236107 }, { state: \'Utah\', ratio: 0.1599462351002303 },\n    { state: \'Texas\', ratio: 0.15312126064715756 }, { state: \'Colorado\', ratio: 0.14506096004212204 },\n    { state: \'Florida\', ratio: 0.14235321900442044 }, { state: \'Nevada\', ratio: 0.14056575861740808 },\n    { state: \'Idaho\', ratio: 0.1400660380126845 }, { state: \'Arizona\', ratio: 0.13871990640825893 },\n    { state: \'North Dakota\', ratio: 0.13302437885728474 }, { state: \'Washington\', ratio: 0.13240355474129084 },\n    // ... 包含正负值的数据 ...\n    { state: \'Connecticut\', ratio: -0.0024649582817701924 }, { state: \'Vermont\', ratio: -0.0027998804617245794 },\n    { state: \'Illinois\', ratio: -0.01237748849783861 }, { state: \'West Virginia\', ratio: -0.032881380080021845 },\n    { state: \'Puerto Rico\', ratio: -0.14281404556189306 }\n  ]\n};\n\n// 默认 VChart Option (Spec) for Bidirectional Bar Chart\nconst option = {\n  type: \'bar\',\n  data: [data],\n  direction: \'horizontal\',\n  xField: \'ratio\',\n  yField: \'state\',\n  axes: [\n    { // Y 轴 (类别轴)\n      orient: \'left\',\n      type: \'band\',\n      domainLine: { onZero: true }, // 轴线在 0 值处\n      tick: { visible: false },    // 隐藏刻度\n      label: { visible: false },   // 隐藏标签\n      visible: true\n    },\n    { // X 轴 (值轴)\n      orient: \'bottom\',\n      type: \'linear\',\n      label: {  // 标签格式化（将在 optionHandler 中处理）\n        // formatMethod: (text) => `${(Number(text) * 100).toFixed(0)}%` \n      },\n      visible: true\n    }\n  ],\n  bar: {\n    style: { \n      // fill 函数将在 optionHandler 中处理\n    }\n  },\n  legends: { visible: false }, // 通常不需要图例\n  tooltip: { visible: true }\n};\n\nconst dataHandler = `return data;`;\n\n// Option 处理函数：处理动态样式和格式化\nconst optionHandler = `\nfunction handleOption(option, config) {\n  // 1. 处理条形图填充颜色\n  const xField = config.option.xField; // 获取值轴字段名\n  if (!option.bar) { option.bar = {}; }\n  if (!option.bar.style) { option.bar.style = {}; }\n  option.bar.style.fill = (datum) => {\n    // 检查 datum 是否存在以及 xField 对应的值是否存在\n    if (datum && typeof datum[xField] === \'number\') {\n      if (datum[xField] < 0) {\n        return \'rgb(233, 163, 201)\'; // 负值颜色 (粉色)\n      } else {\n        return \'rgb(161, 215, 106)\'; // 正值颜色 (绿色)\n      }\n    }\n    // 如果数据无效，返回默认颜色或主题色\n    return undefined; \n  };\n\n  // 2. 处理 X 轴标签百分比格式化\n  const formatPercent = config.setting.find(s => s.field === \'xAxisPercentFormat\')?.value;\n  const xAxisIndex = option.axes?.findIndex(axis => axis.orient === \'bottom\');\n  if (xAxisIndex !== -1 && option.axes[xAxisIndex]) {\n     if (!option.axes[xAxisIndex].label) { option.axes[xAxisIndex].label = {}; }\n     if (formatPercent) {\n       option.axes[xAxisIndex].label.formatMethod = (text) => {\n         const num = Number(text);\n         if (isNaN(num)) { return text; } // 非数字直接返回\n         return \`\${(num * 100).toFixed(0)}%\`;\n       };\n     } else {\n       // 如果不格式化，移除 formatMethod\n       delete option.axes[xAxisIndex].label.formatMethod;\n     }\n  }\n  \n  // 移除 setting 中用于控制格式化的临时字段，避免污染最终 spec\n  // （或者 VchartRender 应该忽略这些非 VChart 标准的 setting 字段）\n  // delete config.setting.find(s => s.field === \'xAxisPercentFormat\');\n\n  return option;\n}\n`;\n\nexport default {\n  version, title, name, type, chartType, option, setting, dataHandler, optionHandler\n};\n 