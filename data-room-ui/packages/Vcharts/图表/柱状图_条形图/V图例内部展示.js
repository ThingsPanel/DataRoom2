// 配置版本号\nconst version = \'2024051816\';\n// 标题\nconst title = \'V图例内部展示\';\n// 用于标识，唯一\nconst name = \'V图例内部展示\';\n// 组件类型标识\nconst type = \'customComponent\';\n// VChart 图表类型标识\nconst chartType = \'bar\'; // 分组条形图\n\n// 右侧配置项\nconst setting = [\n  { label: \'类别字段\', type: \'select\', field: \'yField\', optionField: \'yField\', multiple: false, value: \'\', tabName: \'data\' }, // 对应 city\n  { label: \'数值字段\', type: \'select\', field: \'xField\', optionField: \'xField\', multiple: false, value: \'\', tabName: \'data\' }, // 对应 rate\n  { label: \'系列字段\', type: \'select\', field: \'seriesField\', optionField: \'seriesField\', multiple: false, value: \'\', tabName: \'data\' }, // 对应 trend\n  // 样式配置\n  { label: \'显示图例\', type: \'switch\', field: \'legendVisible\', optionField: \'legends.0.visible\', value: true, tabName: \'custom\', groupName: \'legend\' }, \n  { label: \'图例位置\', type: \'select\', field: \'legendOrient\', optionField: \'legends.0.orient\', options:[{label:\'左\',value:\'left\'},{label:\'顶\',value:\'top\'},{label:\'右\',value:\'right\'},{label:\'底\',value:\'bottom\'}], value: \'top\', tabName: \'custom\', groupName: \'legend\' }, // 参考 spec 是 top\n  { label: \'图例对齐\', type: \'select\', field: \'legendPosition\', optionField: \'legends.0.position\', options:[{label:\'起始\',value:\'start\'},{label:\'中间\',value:\'middle\'},{label:\'末尾\',value:\'end\'}], value: \'start\', tabName: \'custom\', groupName: \'legend\' }, // 参考 spec 是 start\n  // 图例绝对定位和背景建议通过 optionOverride 实现\n  { label: \'显示标签\', type: \'switch\', field: \'labelVisible\', optionField: \'label.visible\', value: true, tabName: \'custom\', groupName: \'label\' },\n  { label: \'标签格式化(加%)\', type: \'switch\', field: \'labelFormatPercent\', optionField: \'label.style.text\', value: true, tabName: \'custom\', groupName: \'label\' }, // 控制标签是否加 %\n  // 通用配置\n  { label: \'主题选择\', type: \'select\', field: \'chartTheme\', optionField: \'theme\', options: [], value: \'light\', tabName: \'custom\', groupName: \'graph\' },\n  { \n    label: \'Option 覆盖 (JSON)\', \n    type: \'textarea\', \n    field: \'optionOverride\', \n    optionField: \'\', \n    value: JSON.stringify({\n      legends: [{\n        layoutType: \'absolute\',\n        left: 150, // 需要根据实际情况调整\n        top: 100, // 需要根据实际情况调整\n        background: {\n          visible: true,\n          padding: 4,\n          style: {\n            stroke: \'#000\', lineWidth: 2, cornerRadius: 2,\n            shadowBlur: 10, shadowColor: \'#69c0ff\', shadowOffsetX: 2, shadowOffsetY: 2 // 调整阴影\n          }\n        }\n      }]\n    }, null, 2),\n    tabName: \'custom\', \n    groupName: \'graph\' \n  }\n];\n\n// 示例数据 (来自参考 spec)\nconst data = {\n  id: \'internalLegendData\',\n  values: [\n    { city: \'City A\', trend: \'increase\', rate: 1.5 }, { city: \'City A\', trend: \'decrease\', rate: -0.8 },\n    { city: \'City B\', trend: \'increase\', rate: 0.9 }, { city: \'City B\', trend: \'decrease\', rate: -1.2 },\n    // ... 更多数据\n  ]\n};\n\n// 默认 VChart Option (Spec) - 基础分组条形图\nconst option = {\n  type: \'bar\',\n  data: [data],\n  direction: \'horizontal\',\n  yField: \'city\',\n  xField: \'rate\',\n  seriesField: \'trend\',\n  label: {\n    visible: true,\n    style: {\n      // 默认格式化，会受 setting 控制\n      text: datum => `${datum.rate.toFixed(1)}%`, \n      fill: \'#333\'\n    }\n  },\n  axes: [\n    { orient: \'left\', domainLine: { visible: false }, tick: { visible: false } }, // 隐藏 Y 轴线和刻度\n    { orient: \'bottom\', label: { formatMethod: val => `${val}%` } } // X 轴标签加 %\n  ],\n  legends: [{\n    visible: true,\n    orient: \'top\',\n    position: \'start\'\n    // 绝对布局和背景在 override 中\n  }]\n};\n\nconst dataHandler = `return data;`;\n// Option 处理函数：根据 setting 控制标签格式化\nconst optionHandler = `\nfunction handleOption(option, config) {\n  const formatPercentSetting = config.setting.find(s => s.field === \'labelFormatPercent\');\n  if (option.label && option.label.style) {\n    if (formatPercentSetting?.value) {\n      option.label.style.text = datum => \`\${datum[option.xField]?.toFixed(1)}%\`;\n    } else {\n      option.label.style.text = datum => datum[option.xField];\n    }\n  }\n  return option;\n}\n`;\n\nexport default {\n  version, title, name, type, chartType, option, setting, dataHandler, optionHandler\n};\ 